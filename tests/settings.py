"""
Django settings for assistant project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys

import environ
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Get the current working directory (where manage.py might be run)
CURRENT_WORKING_DIR = Path(os.getcwd())

# Initialize environment
ENV = environ.Env()

# Try to load .env from the current working directory first
env_path = CURRENT_WORKING_DIR / '.env'
if not env_path.exists():
    # If not found, fallback to BASE_DIR
    env_path = BASE_DIR / '.env'


ENV = environ.Env()
ENV.read_env(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cdf^g1&tuu(p!ul3z0(bkeqyj#$ke=04&-w=)c%9)a!d8_*e6l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENV.bool('DEBUG', default=False)

ALLOWED_HOSTS = ENV('ALLOWED_HOSTS').split(',')

if csrf_trusted_origins := ENV.str('CSRF_TRUSTED_ORIGINS', None):
    CSRF_TRUSTED_ORIGINS = csrf_trusted_origins.split(',')

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


ROOT_URLCONF = 'assistant.assistant.urls'


RESOURCES_DIR = BASE_DIR / 'resources'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'drf_yasg',
    'assistant.bot',
    'assistant.storage',
    'assistant.loading',
    'assistant.processing',
    'assistant.admin',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

WSGI_APPLICATION = 'assistant.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': ENV.db('DATABASE_URL'),
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

DEFAULT_AI_MODEL = 'test'


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

log_handlers = {}

if DEBUG:
    log_handlers['console'] = {
        'level': 'DEBUG',
        'class': 'logging.StreamHandler',
        'formatter': 'simple',
    }


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] [%(process)d] [%(levelname)s] %(message)s'
        },
    },
    'handlers': log_handlers,
    'root': {
        'handlers': list(log_handlers.keys()),
        'level': 'DEBUG',
    },
}
